#!/usr/bin/env python
#
# Try to rescue data contained in the mbox files...
import os
import sys
import atexit
import argparse
import mailbox
import tempfile

_tempfiles = []


def mktemp():
    _, name = tempfile.mkstemp(prefix='mboxfixer')
    _tempfiles.append(name)
    return name


def cleanup_tempfiles():
    for f in _tempfiles:
        os.remove(f)

def suspect(line):
    return line.startswith('From') and not line.startswith('From nobody') and not line.startswith('From:')

def preprocess_mbox(mbname):
    """
    Attempt to repair the given mbox.
    Tries to fix the From line and discover
    false From lines.
    Returns a new mbox file.
    """
    output_filename = mktemp()
    with open(output_filename, 'wb') as sink:
        with open(mbname, 'rb') as source:
            for line in source:
                if suspect(line):
                    sink.write('>')
                sink.write(line)
    return output_filename


def verify_mbox(name, mbfile):
    """
    Tries to make sure that the messages are valid
    in this mbox
    """
    ok = True
    sys.stdout.write("%s..." % (name))
    sys.stdout.flush()
    mbox = mailbox.mbox(mbfile)
    mbox.lock()
    for i, message in enumerate(mbox):
        mid = message.get('message-id')
        if not mid:
            ok = False
            sys.stdout.write("FAIL\n")
            print "%03d: %s" % (i, message.keys())
    if ok:
        sys.stdout.write("OK\n")
    mbox.unlock()
    mbox.close()
    return ok


def process_mbox(name, source, dest):
    """
    Copy messages from the given mbox
    into the Maildir.
    """
    existing = set()
    mbox = mailbox.mbox(source)
    dest.lock()
    mbox.lock()
    try:
        try:
            folder = dest.get_folder(name)
            print "Checking %s/" % (name)
            for message in folder:
                mid = message.get('message-id')
                if mid:
                    existing.add(mid)
            print "Updating %s/" % (name)
        except mailbox.NoSuchMailboxError:
            folder = dest.add_folder(name)
            print "Creating %s/" % (name)
        for message in mbox:
            mid = message.get('message-id')
            if mid and mid in existing:
                print "Skipping %s" % (mid)
                continue
            folder.add(message)
    finally:
        mbox.unlock()
        dest.unlock()
    return True


def run():
    atexit.register(cleanup_tempfiles)
    parser = argparse.ArgumentParser(
        description='Process broken mbox files into an Maildir structure')
    parser.add_argument('-o', '--output', dest='output',
                        help='directory to write output into')
    parser.add_argument('mbox', nargs='+',
                        help='mailbox to process as input')
    parser.add_argument('--verify', dest='verify', action='store_true',
                        help='run in verification mode')
    args = parser.parse_args()

    if not args.output and not args.verify:
        parser.print_usage(file=sys.stderr)
        print >>sys.stderr, "Error: No output directory specified"
        sys.exit(1)

    if args.output and not os.path.isdir(args.output):
        os.makedirs(args.output)

    dest = None
    if args.output:
        dest = mailbox.Maildir(args.output)

    ret = True
    for mbname in args.mbox:
        foldername = os.path.splitext(os.path.basename(mbname))[0]
        new_mbox = preprocess_mbox(mbname)
        if new_mbox:
            if args.verify:
                ret = ret and verify_mbox(foldername, new_mbox)
            if args.output:
                ret = ret and process_mbox(foldername, new_mbox, dest)
    if not ret:
        sys.exit(1)

if __name__ == "__main__":
    run()
